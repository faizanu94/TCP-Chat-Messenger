/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package messenger;

import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.net.Socket;
import java.text.SimpleDateFormat;
import java.util.Calendar;

/**
 *
 * @author Faizan
 */
public class Client extends javax.swing.JFrame {
    private Socket socket;
    private DataInputStream datainputstream;
    private DataOutputStream dataoutputstream;
    private boolean ClientStatus;
    private boolean ServerStatus;
    
    public Client() {
        initComponents();
        this.setBounds(700,100,520,420);
        ClientStatus = false;
        ServerStatus = false;
    }

    private void Initialize()
    {
        try
        {
            datainputstream = new DataInputStream(socket.getInputStream());
            dataoutputstream = new DataOutputStream(socket.getOutputStream());
        }
        catch(Exception ex)
        {
            ConnectionStatus.setText("                         Not Connected");
        }
    }

    private String GetTime()
    {
        Calendar cal = Calendar.getInstance();
        cal.getTime();
        SimpleDateFormat sdf = new SimpleDateFormat("HH:mm:ss");
        return sdf.format(cal.getTime());
    }    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Label = new javax.swing.JLabel();
        IP_Port = new javax.swing.JTextField();
        ConnectButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        conversation = new javax.swing.JTextArea();
        jScrollPane1 = new javax.swing.JScrollPane();
        Chat = new javax.swing.JTextArea();
        SendButton = new javax.swing.JButton();
        ConnectionStatus = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Client");
        setResizable(false);
        getContentPane().setLayout(null);

        Label.setFont(new java.awt.Font("Comic Sans MS", 1, 14)); // NOI18N
        Label.setText("IP & Port:");
        getContentPane().add(Label);
        Label.setBounds(40, 40, 130, 30);

        IP_Port.setFont(new java.awt.Font("Comic Sans MS", 0, 12)); // NOI18N
        IP_Port.setText("localhost:1234");
        getContentPane().add(IP_Port);
        IP_Port.setBounds(130, 40, 180, 30);

        ConnectButton.setFont(new java.awt.Font("Comic Sans MS", 0, 12)); // NOI18N
        ConnectButton.setText("Connect");
        ConnectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConnectButtonActionPerformed(evt);
            }
        });
        getContentPane().add(ConnectButton);
        ConnectButton.setBounds(340, 40, 130, 30);

        conversation.setEditable(false);
        conversation.setColumns(20);
        conversation.setFont(new java.awt.Font("Comic Sans MS", 0, 12)); // NOI18N
        conversation.setRows(5);
        conversation.setEnabled(false);
        jScrollPane2.setViewportView(conversation);

        getContentPane().add(jScrollPane2);
        jScrollPane2.setBounds(10, 80, 490, 250);

        Chat.setColumns(20);
        Chat.setFont(new java.awt.Font("Comic Sans MS", 0, 12)); // NOI18N
        Chat.setRows(1);
        jScrollPane1.setViewportView(Chat);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(10, 340, 400, 40);

        SendButton.setFont(new java.awt.Font("Comic Sans MS", 0, 12)); // NOI18N
        SendButton.setText("Send");
        SendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SendButtonActionPerformed(evt);
            }
        });
        getContentPane().add(SendButton);
        SendButton.setBounds(430, 340, 60, 40);

        ConnectionStatus.setEditable(false);
        ConnectionStatus.setFont(new java.awt.Font("Comic Sans MS", 0, 12)); // NOI18N
        ConnectionStatus.setText("                    Not Connected");
        ConnectionStatus.setEnabled(false);
        ConnectionStatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConnectionStatusActionPerformed(evt);
            }
        });
        getContentPane().add(ConnectionStatus);
        ConnectionStatus.setBounds(110, 10, 240, 20);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ConnectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConnectButtonActionPerformed
        new Thread(new Runnable()
        {
            @Override
            public void run()
            {
                String[] temp = IP_Port.getText().split(":");
                try
                {
                    socket = new Socket(temp[0],Integer.parseInt(temp[1]));
                    Initialize();
                    ConnectionStatus.setText("                      Connected");
                    StartRecieving();
                }
                catch(Exception ex)
                {
                    ConnectionStatus.setText("                    Not Connected");
                }
            }
        }).start();
    }//GEN-LAST:event_ConnectButtonActionPerformed

    private void SendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SendButtonActionPerformed
        new Thread(new Runnable()
        {
            @Override
            public void run()
            {
                try
                {
                    dataoutputstream.writeUTF(Chat.getText());
                    dataoutputstream.flush();
                    if(ClientStatus == false)
                    {
                        conversation.append("\n Client: \n [" + GetTime() +"]  " + Chat.getText());
                        ClientStatus = true;
                    }
                    else
                    {
                        conversation.append("\n [" + GetTime() + "]  " + Chat.getText());
                    }
                    ServerStatus = false;
                    Chat.setText("");
                }
                catch(IOException ex)
                {
                }
            }
        }).start();
    }//GEN-LAST:event_SendButtonActionPerformed

    private void ConnectionStatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConnectionStatusActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ConnectionStatusActionPerformed

    private void StartRecieving()
    {
        new Thread(new Runnable()
        {
            @Override
            public void run()
            {
                String text;
                while(true)
                {
                    try
                    {
                        text = datainputstream.readUTF();
                        ClientStatus = false;
                        if(ServerStatus == false)
                        {
                           conversation.append("\n Server: \n [" + GetTime() + "]  " + text);
                           ServerStatus = true;
                        }
                        else
                        {
                           conversation.append("\n [" + GetTime() + "]  " + text);
                        }
                    }
                    catch (IOException ex)
                    {
                    }
                }
            }
        }).start();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced dataInputStream Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Client().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea Chat;
    private javax.swing.JButton ConnectButton;
    private javax.swing.JTextField ConnectionStatus;
    private javax.swing.JTextField IP_Port;
    private javax.swing.JLabel Label;
    private javax.swing.JButton SendButton;
    private javax.swing.JTextArea conversation;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
}